{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messagesSubject = new Subject();\n    this.messages$ = this.messagesSubject.asObservable();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n  }\n  connect(token) {\n    // Close existing connection if any\n    this.disconnect();\n    // Build WebSocket URL\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.hostname;\n    const port = window.location.port || (protocol === 'wss:' ? '443' : '80');\n    const wsUrl = `${protocol}//${host}:${port}/ws?token=${token}`;\n    // For development, use direct backend URL\n    const isDev = window.location.hostname === 'localhost';\n    const finalUrl = isDev ? `ws://localhost:3000/ws?token=${token}` : wsUrl;\n    console.log('Connecting to WebSocket:', finalUrl);\n    try {\n      this.socket = new WebSocket(finalUrl);\n      this.socket.onopen = () => {\n        console.log('WebSocket connected');\n        this.reconnectAttempts = 0;\n        this.messagesSubject.next({\n          type: 'connected'\n        });\n      };\n      this.socket.onmessage = event => {\n        try {\n          const message = JSON.parse(event.data);\n          console.log('WebSocket message:', message);\n          this.messagesSubject.next(message);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      this.socket.onerror = error => {\n        console.error('WebSocket error:', error);\n        this.messagesSubject.next({\n          type: 'error',\n          message: 'Connection error'\n        });\n      };\n      this.socket.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.messagesSubject.next({\n          type: 'disconnected'\n        });\n        // Attempt to reconnect\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.reconnectAttempts++;\n          console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n          setTimeout(() => {\n            this.connect(token);\n          }, this.reconnectDelay * this.reconnectAttempts);\n        }\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket:', error);\n      this.messagesSubject.next({\n        type: 'error',\n        message: 'Failed to connect'\n      });\n    }\n  }\n  disconnect() {\n    if (this.socket) {\n      this.reconnectAttempts = this.maxReconnectAttempts; // Prevent auto-reconnect\n      this.socket.close();\n      this.socket = null;\n    }\n  }\n  send(message) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }\n  isConnected() {\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\n  }\n  static {\n    this.ɵfac = function WebSocketService_Factory(t) {\n      return new (t || WebSocketService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WebSocketService,\n      factory: WebSocketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Subject","WebSocketService","constructor","messagesSubject","asObservable","connect","token","disconnect","protocol","window","location","host","hostname","port","wsUrl","isDev","finalUrl","console","log","socket","WebSocket","onopen","reconnectAttempts","next","type","onmessage","event","message","JSON","parse","data","error","onerror","onclose","maxReconnectAttempts","setTimeout","reconnectDelay","close","send","readyState","OPEN","stringify","warn","isConnected","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\jmdall\\PhpstormProjects\\secure-file-exchange\\frontend\\src\\app\\services\\websocket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebSocketService {\n  private socket: WebSocket | null = null;\n  private messagesSubject = new Subject<any>();\n  public messages$ = this.messagesSubject.asObservable();\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n  \n  connect(token: string) {\n    // Close existing connection if any\n    this.disconnect();\n    \n    // Build WebSocket URL\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.hostname;\n    const port = window.location.port || (protocol === 'wss:' ? '443' : '80');\n    const wsUrl = `${protocol}//${host}:${port}/ws?token=${token}`;\n    \n    // For development, use direct backend URL\n    const isDev = window.location.hostname === 'localhost';\n    const finalUrl = isDev ? `ws://localhost:3000/ws?token=${token}` : wsUrl;\n    \n    console.log('Connecting to WebSocket:', finalUrl);\n    \n    try {\n      this.socket = new WebSocket(finalUrl);\n      \n      this.socket.onopen = () => {\n        console.log('WebSocket connected');\n        this.reconnectAttempts = 0;\n        this.messagesSubject.next({ type: 'connected' });\n      };\n      \n      this.socket.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          console.log('WebSocket message:', message);\n          this.messagesSubject.next(message);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      \n      this.socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.messagesSubject.next({ type: 'error', message: 'Connection error' });\n      };\n      \n      this.socket.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.messagesSubject.next({ type: 'disconnected' });\n        \n        // Attempt to reconnect\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.reconnectAttempts++;\n          console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n          \n          setTimeout(() => {\n            this.connect(token);\n          }, this.reconnectDelay * this.reconnectAttempts);\n        }\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket:', error);\n      this.messagesSubject.next({ type: 'error', message: 'Failed to connect' });\n    }\n  }\n  \n  disconnect() {\n    if (this.socket) {\n      this.reconnectAttempts = this.maxReconnectAttempts; // Prevent auto-reconnect\n      this.socket.close();\n      this.socket = null;\n    }\n  }\n  \n  send(message: any) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }\n  \n  isConnected(): boolean {\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
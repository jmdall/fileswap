{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jmdall/PhpstormProjects/secure-file-exchange/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ExchangeService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = '/api';\n  }\n  getHeaders() {\n    const token = localStorage.getItem('exchangeToken');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    });\n  }\n  createSession() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this.http.post(`${_this.apiUrl}/sessions`, {}));\n    })();\n  }\n  joinSession(sessionId, token) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this2.http.post(`${_this2.apiUrl}/sessions/${sessionId}/join`, {\n        token\n      }));\n    })();\n  }\n  getSessionStatus(sessionId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this3.http.get(`${_this3.apiUrl}/sessions/${sessionId}/status`, {\n        headers: _this3.getHeaders()\n      }));\n    })();\n  }\n  getPresignedUrl(filename, size, mimeType) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this4.http.post(`${_this4.apiUrl}/uploads/presign`, {\n        filename,\n        size,\n        mimeType\n      }, {\n        headers: _this4.getHeaders()\n      }));\n    })();\n  }\n  completeUpload(fileId, storageKey) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this5.http.post(`${_this5.apiUrl}/uploads/complete`, {\n        fileId,\n        storageKey\n      }, {\n        headers: _this5.getHeaders()\n      }));\n    })();\n  }\n  acceptExchange(sessionId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this6.http.post(`${_this6.apiUrl}/sessions/${sessionId}/accept`, {}, {\n        headers: _this6.getHeaders()\n      }));\n    })();\n  }\n  rejectExchange(sessionId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return firstValueFrom(_this7.http.post(`${_this7.apiUrl}/sessions/${sessionId}/reject`, {}, {\n        headers: _this7.getHeaders()\n      }));\n    })();\n  }\n  static {\n    this.ɵfac = function ExchangeService_Factory(t) {\n      return new (t || ExchangeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ExchangeService,\n      factory: ExchangeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,cAAc,QAAQ,MAAM;;;AAKrC,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,MAAM;EAEgB;EAE/BC,UAAU;IAChB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACnD,OAAO,IAAIR,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAEM,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG;KAC9C,CAAC;EACJ;EAEMG,aAAa;IAAA;IAAA;MACjB,OAAOR,cAAc,CACnB,KAAI,CAACG,IAAI,CAACM,IAAI,CAAM,GAAG,KAAI,CAACC,MAAM,WAAW,EAAE,EAAE,CAAC,CACnD;IAAC;EACJ;EAEMC,WAAW,CAACC,SAAiB,EAAEP,KAAa;IAAA;IAAA;MAChD,OAAOL,cAAc,CACnB,MAAI,CAACG,IAAI,CAACM,IAAI,CACZ,GAAG,MAAI,CAACC,MAAM,aAAaE,SAAS,OAAO,EAC3C;QAAEP;MAAK,CAAE,CACV,CACF;IAAC;EACJ;EAEMQ,gBAAgB,CAACD,SAAiB;IAAA;IAAA;MACtC,OAAOZ,cAAc,CACnB,MAAI,CAACG,IAAI,CAACW,GAAG,CACX,GAAG,MAAI,CAACJ,MAAM,aAAaE,SAAS,SAAS,EAC7C;QAAEG,OAAO,EAAE,MAAI,CAACX,UAAU;MAAE,CAAE,CAC/B,CACF;IAAC;EACJ;EAEMY,eAAe,CAACC,QAAgB,EAAEC,IAAY,EAAEC,QAAgB;IAAA;IAAA;MACpE,OAAOnB,cAAc,CACnB,MAAI,CAACG,IAAI,CAACM,IAAI,CACZ,GAAG,MAAI,CAACC,MAAM,kBAAkB,EAChC;QAAEO,QAAQ;QAAEC,IAAI;QAAEC;MAAQ,CAAE,EAC5B;QAAEJ,OAAO,EAAE,MAAI,CAACX,UAAU;MAAE,CAAE,CAC/B,CACF;IAAC;EACJ;EAEMgB,cAAc,CAACC,MAAc,EAAEC,UAAkB;IAAA;IAAA;MACrD,OAAOtB,cAAc,CACnB,MAAI,CAACG,IAAI,CAACM,IAAI,CACZ,GAAG,MAAI,CAACC,MAAM,mBAAmB,EACjC;QAAEW,MAAM;QAAEC;MAAU,CAAE,EACtB;QAAEP,OAAO,EAAE,MAAI,CAACX,UAAU;MAAE,CAAE,CAC/B,CACF;IAAC;EACJ;EAEMmB,cAAc,CAACX,SAAiB;IAAA;IAAA;MACpC,OAAOZ,cAAc,CACnB,MAAI,CAACG,IAAI,CAACM,IAAI,CACZ,GAAG,MAAI,CAACC,MAAM,aAAaE,SAAS,SAAS,EAC7C,EAAE,EACF;QAAEG,OAAO,EAAE,MAAI,CAACX,UAAU;MAAE,CAAE,CAC/B,CACF;IAAC;EACJ;EAEMoB,cAAc,CAACZ,SAAiB;IAAA;IAAA;MACpC,OAAOZ,cAAc,CACnB,MAAI,CAACG,IAAI,CAACM,IAAI,CACZ,GAAG,MAAI,CAACC,MAAM,aAAaE,SAAS,SAAS,EAC7C,EAAE,EACF;QAAEG,OAAO,EAAE,MAAI,CAACX,UAAU;MAAE,CAAE,CAC/B,CACF;IAAC;EACJ;;;uBA3EWH,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAwB,SAAfxB,eAAe;MAAAyB,YAFd;IAAM;EAAA","names":["HttpHeaders","firstValueFrom","ExchangeService","constructor","http","getHeaders","token","localStorage","getItem","createSession","post","apiUrl","joinSession","sessionId","getSessionStatus","get","headers","getPresignedUrl","filename","size","mimeType","completeUpload","fileId","storageKey","acceptExchange","rejectExchange","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\jmdall\\PhpstormProjects\\secure-file-exchange\\frontend\\src\\app\\services\\exchange.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { firstValueFrom } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExchangeService {\n  private apiUrl = '/api';\n  \n  constructor(private http: HttpClient) {}\n  \n  private getHeaders(): HttpHeaders {\n    const token = localStorage.getItem('exchangeToken');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    });\n  }\n  \n  async createSession(): Promise<any> {\n    return firstValueFrom(\n      this.http.post<any>(`${this.apiUrl}/sessions`, {})\n    );\n  }\n  \n  async joinSession(sessionId: string, token: string): Promise<any> {\n    return firstValueFrom(\n      this.http.post<any>(\n        `${this.apiUrl}/sessions/${sessionId}/join`, \n        { token }\n      )\n    );\n  }\n  \n  async getSessionStatus(sessionId: string): Promise<any> {\n    return firstValueFrom(\n      this.http.get<any>(\n        `${this.apiUrl}/sessions/${sessionId}/status`,\n        { headers: this.getHeaders() }\n      )\n    );\n  }\n  \n  async getPresignedUrl(filename: string, size: number, mimeType: string): Promise<any> {\n    return firstValueFrom(\n      this.http.post<any>(\n        `${this.apiUrl}/uploads/presign`,\n        { filename, size, mimeType },\n        { headers: this.getHeaders() }\n      )\n    );\n  }\n  \n  async completeUpload(fileId: string, storageKey: string): Promise<any> {\n    return firstValueFrom(\n      this.http.post<any>(\n        `${this.apiUrl}/uploads/complete`,\n        { fileId, storageKey },\n        { headers: this.getHeaders() }\n      )\n    );\n  }\n  \n  async acceptExchange(sessionId: string): Promise<any> {\n    return firstValueFrom(\n      this.http.post<any>(\n        `${this.apiUrl}/sessions/${sessionId}/accept`,\n        {},\n        { headers: this.getHeaders() }\n      )\n    );\n  }\n  \n  async rejectExchange(sessionId: string): Promise<any> {\n    return firstValueFrom(\n      this.http.post<any>(\n        `${this.apiUrl}/sessions/${sessionId}/reject`,\n        {},\n        { headers: this.getHeaders() }\n      )\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}